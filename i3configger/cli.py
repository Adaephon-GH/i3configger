import logging
import os
import sys
import tempfile
from argparse import ArgumentParser
from pathlib import Path

from daemon import daemon

from i3configger import __version__
from i3configger.lib import I3Configger

log = logging.getLogger()


def configure_logging(verbose, logtToFile=True):
    logPath = Path('/var/log')
    if not logPath.exists():
        logPath = Path(tempfile.gettempdir())
    logFilePath = logPath / 'i3configger.log'
    logPath = '/var/log/i3configger.log'
    level = logging.DEBUG if verbose else logging.INFO
    fmt = '%(asctime)s %(name)s %(levelname)s: %(message)s'
    logging.basicConfig(stream=sys.stdout, format=fmt, level=level)
    if not logtToFile:
        return
    fileHandler = logging.FileHandler(logFilePath)
    fileHandler.setFormatter(fmt)
    fileHandler.setLevel(level)
    log.addHandler(fileHandler)
    log.addHandler(fileHandler)
    """add file handler to root logger to have libraries output also"""
    log.debug("logging to %s", logFilePath)


def get_cnf():
    p = ArgumentParser('i3configger')
    p.add_argument('--verbose', action="store_true", default=False)
    p.add_argument('--version', action='version', version=__version__)
    g = p.add_mutually_exclusive_group()
    g.add_argument('--watch', action="store_true",
                   help="build new config on changes",
                   default=False)
    g.add_argument('--daemon', action="store_true",
                   help="run as deamon and watch changes in conf.d",
                   default=False)
    p.add_argument('--sources', action="store",
                   help="path to directory containing source files",
                   default=os.path.expanduser('~/.i3/config.d'))
    p.add_argument('--destination', action="store",
                   help="path to the i3 config file",
                   default=os.path.expanduser('~/.i3/config'))
    p.add_argument('--suffix', action="store",
                   help="suffix of the source files",
                   default='.i3conf')
    p.add_argument('--message', action="store_true",
                   help="customize timestamped generation message",
                   default='generated by i3 configger')
    return p.parse_args()


def main():
    cnf = get_cnf()
    configure_logging(cnf.verbose)
    log.debug("config: %s", cnf)
    i3Configger = I3Configger(cnf)
    if cnf.watch:
        i3Configger.watch()
    elif cnf.daemon:
        log.debug("daemonizing ...")
        with daemon.DaemonContext():
            i3Configger.watch()
    else:
        i3Configger.build()


if __name__ == '__main__':
    sys.exit(main())
